#!/usr/bin/env python3
"""Test vulnerable_deps fix for both list and int formats"""

from app.services.pdf_service import PDFService

def test_vulnerable_deps_fix():
    print("🔧 Testing vulnerable_deps Fix...")
    print("=" * 50)
    
    # Test data with vulnerable_dependencies as a LIST (from dependency analyzer)
    analysis_result_list = {
        'id': 'test_list',
        'repository_url': 'https://github.com/test/repo',
        'status': 'completed',
        'repository_overview': {
            'name': 'Test Repository',
            'description': 'Test with list format',
            'languages': [{'name': 'Python', 'percentage': 100}],
            'total_files': 10,
            'total_lines': 1000,
            'lines_of_code': 1000
        },
        'technical_metrics': {
            'security_vulnerabilities': 2,
            'dependencies_outdated': 3,
            'dependencies_total': 15,
            'vulnerable_dependencies': [  # LIST format
                {'name': 'package1', 'version': '1.0', 'vulnerability': 'CVE-2023-123'},
                {'name': 'package2', 'version': '2.1', 'vulnerability': 'CVE-2023-456'}
            ],
            'complexity_metrics': {
                'average_complexity': 3.2,
                'high_complexity_count': 2
            }
        },
        'ai_insights': {
            'summary': 'Test with list format',
            'key_strengths': ['Good structure'],
            'areas_for_improvement': ['Update deps']
        }
    }
    
    # Test data with vulnerable_dependencies as an INT (from database)
    analysis_result_int = {
        'id': 'test_int',
        'repository_url': 'https://github.com/test/repo',
        'status': 'completed',
        'repository_overview': {
            'name': 'Test Repository',
            'description': 'Test with int format',
            'languages': [{'name': 'Python', 'percentage': 100}],
            'total_files': 10,
            'total_lines': 1000,
            'lines_of_code': 1000
        },
        'technical_metrics': {
            'security_vulnerabilities': 1,
            'dependencies_outdated': 2,
            'dependencies_total': 12,
            'vulnerable_dependencies': 3,  # INT format
            'complexity_metrics': {
                'average_complexity': 2.8,
                'high_complexity_count': 1
            }
        },
        'ai_insights': {
            'summary': 'Test with int format',
            'key_strengths': ['Clean code'],
            'areas_for_improvement': ['Security fixes']
        }
    }
    
    try:
        pdf_service = PDFService()
        
        # Test with LIST format
        print("📄 Testing LIST format...")
        result_path_list = pdf_service.generate_report(analysis_result_list, 'test_list_report.pdf')
        print(f"✅ LIST format PDF generated: {result_path_list}")
        
        # Test with INT format
        print("📄 Testing INT format...")
        result_path_int = pdf_service.generate_report(analysis_result_int, 'test_int_report.pdf')
        print(f"✅ INT format PDF generated: {result_path_int}")
        
        # Check both files exist
        import os
        list_exists = os.path.exists(result_path_list)
        int_exists = os.path.exists(result_path_int)
        
        if list_exists and int_exists:
            list_size = os.path.getsize(result_path_list) / 1024
            int_size = os.path.getsize(result_path_int) / 1024
            
            print(f"📊 LIST format PDF: {list_size:.1f} KB")
            print(f"📊 INT format PDF: {int_size:.1f} KB")
            print()
            print("🎉 SUCCESS! vulnerable_deps fix working for both formats!")
            print("✅ LIST format (from dependency analyzer) handled correctly")
            print("✅ INT format (from database/cache) handled correctly")
            print("✅ No more NameError: name 'vulnerable_deps' is not defined")
            
            return True
        else:
            print("❌ One or both PDF files not created")
            return False
            
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    success = test_vulnerable_deps_fix()
    exit(0 if success else 1) 